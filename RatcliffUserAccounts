//CREATOR: Alexandor Ratcliff
//COURSE: CPT 187
//PURPOSE: Creates accounts that stores the username and passwords for users
//START DATE: 4/20/2022
package edu.apt187.ratcliff.exercise6;
import java.util.Scanner;
import java.io.FileInputStream;
import java.io.PrintWriter;
import java.io.FileWriter;
import java.io.IOException;
//beginning of the UserAccounts Class
public class UserAccounts 
{
	//declares and initializes the constants for UserAccounts
	private  int NOT_FOUND = -1;
	private  int RESET_VALUE = 0;
	private  int MAXIMUM_RECORDS = 50;
	private String[] userNames = new String[MAXIMUM_RECORDS];
	private String[] passwords = new String[MAXIMUM_RECORDS];
	private String masterFileName = "";
	private int recordCount = 0;
	private int searchedIndex = 0;

	//Start of the UserAccounts Constructor
	public UserAccounts(String borrowedFileName)
	{
		masterFileName = borrowedFileName;
	}//End of UserAccounts Constructor

	//sets the user account arrays
	public void setUserAccountArrays()
	{
		try
		{
			Scanner infile = new Scanner(new FileInputStream(masterFileName));
			recordCount = RESET_VALUE;
			//while loop to get the set the userName and password for each record up to the maximum
			while(infile.hasNext() == true && recordCount < MAXIMUM_RECORDS)
			{
				userNames[recordCount] = infile.next();
				passwords[recordCount] = infile.next();
				recordCount++;
			}//End of while loop
			infile.close();
		}//End of try
		catch(IOException ex)
		{
			recordCount = NOT_FOUND;
		}//End of catch
	}//End of setUserAccountArrays

	//invokes the search behavior and assigns results to searchedIndex
	public void setSearchedIndex(String borrowedUserName)
	{
		searchedIndex = getSeqSearch(borrowedUserName);
	}//End of setSearchedIndex

	//overloaded method to assign different values to searchedIndex
	public void setSearchedIndex(String borrowedUserName, String borrowedPassword)
	{
		searchedIndex = getSeqSearch(borrowedUserName);
		//if statement to test the searchedIndex and the password to see if it matches
		if(searchedIndex >= RESET_VALUE && getPasswordMatch(borrowedPassword) == false)
		{
			searchedIndex = NOT_FOUND;
		}//End of if statement
	}//End of overloaded setSearchedIndex

	//method to append a file
	public void setWriteOneRecord(String borrowedUserName, String borrowedPassword)
	{
		try
		{
			PrintWriter filePW = new PrintWriter(new FileWriter(masterFileName, true));
			filePW.printf("%n%s\t%s", borrowedUserName, borrowedPassword);
			recordCount++;
			filePW.close();
		}//End of try
		catch(IOException ex)
		{
			recordCount = NOT_FOUND;
		}//End of catch
	}//End of setWriteOneRecord

	//start of the getters

	//gets the SeqSearch
	public int getSeqSearch(String borrowedBorrowedUserName)
	{
		int localIndex = 0;
		int localFound = NOT_FOUND;

		while(localIndex < recordCount)
		{
			//if statement to test the borrowedUserName
			if(userNames[localIndex].equalsIgnoreCase(borrowedBorrowedUserName))
			{
				localFound = localIndex;
				localIndex = recordCount;
			}//End of if statement
			else
			{
				localIndex++;
			}//End of else 
		}
		//End of while statement
		return localFound;
	}//End of getSeqSearch

	//compares the borrowed value to the value stored
	public boolean getPasswordMatch(String borrrowedBorrowedPassword)
	{
		return passwords[searchedIndex].equals(borrrowedBorrowedPassword);
	}//End of getPasswordMatch

	//gets the masterFileName
	public String getFileName()
	{
		return masterFileName;
	}//End of getFileName

	//gets the maximum records
	public int getMaximumRecords()
	{
		return MAXIMUM_RECORDS;
	}//End of getMaximumRecords

	//gets the record count
	public int getRecordCount()
	{
		return recordCount;
	}//end of getRecordCount

	//gets the searchedIndex
	public int getSearchedIndex()
	{
		return searchedIndex;
	}//End of getSearchedIndex
}//End of UserAccounts
