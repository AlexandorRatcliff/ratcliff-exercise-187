//CREATOR: Alexandor Ratcliff
//COURSE: CPT 187
//PURPOSE: To accept answers from a customer and total their order cost. This program
//will also display all the information relevant to the customer's order
//START DATE: 4/20/2022
package edu.apt187.ratcliff.exercise6;

import java.util.Scanner;

//start of the main class
public class MainClass 
{
	//declares and initializes the constants for the MainClass
	public static final char[] MENU_CHARS = {'A', 'B', 'Q'};
	public static final String[] MENU_OPTIONS = {"Login", "Create an Account", "Quit"};
	public static final char[] FILE_MENU_CHARS = {'A', 'B', 'R'};
	public static final String[] FILE_MENU_OPTIONS = {"Load Inventory", "Create Order", "Return to Main Menu"};
	public static final char[] SUB_MENU_CHARS = {'A', 'B', 'C', 'D'};
	public static final String INVENTORY_FILE_NAME = "MasterInventoryFile.dat";
	public static final String ACCOUNTS_FILE_NAME = "MasterUserFile.dat";
	//start of the main method
	public static void main(String[] args) 
	{
		Scanner input = new Scanner(System.in);
		Inventory currentInventory = new Inventory();
		Order currentOrder = new Order();
		WriteOrder orders = new WriteOrder(INVENTORY_FILE_NAME);
		UserAccounts currentUser = new UserAccounts(ACCOUNTS_FILE_NAME);

		//declares the local variables for the main method
		String userName = "";
		char menuSelection = ' ';

		displayWelcomeBanner();
		menuSelection = validateMenuSelection(input);

		//while loop to test if the menuSelection != 'Q'
		while(menuSelection != 'Q')
		{
			currentUser.setUserAccountArrays();
			userName = getUserName(input);
			//if statement to test if the menuSelection != 'A'
			if(menuSelection != 'A')
			{
				currentUser.setSearchedIndex(userName);
				//if statement to test if the currentUser SearchIndex >= 0
				if(currentUser.getSearchedIndex() >= 0)
				{
					displayAccountResults(userName);
				}//End of if statement testing the currentUser SearchIndex
				else
				{
					currentUser.setWriteOneRecord(userName, getPassword(input));
					displayAccountResults();
				}//End of else for testing the currentUser's searched index
			}//End of if statement testing the menuSelection != 'A'
			else
			{
				currentUser.setSearchedIndex(userName, getPassword(input));
				//if statement to test the current user searched < 0
				if(currentUser.getSearchedIndex() < 0)
				{
					displayLoginError();
				}//End of if statement testing the currentUser Searched index < 0
				else
				{
					menuSelection = validateFileSelection(input);
					//while loop to test if the fileSelection != 'R'
					while(menuSelection != 'R')
					{
						//if statement to test if the menuSelection == 'A'
						if(menuSelection == 'A')
						{
							currentInventory.setLoadItems(getFileName(input));
							//if statement testing if the recordCount <= 0
							if(currentInventory.getRecordCount() <= 0)
							{
								displayFileError();
							}//End of if statement testing if the recordCount <= 0
							else
							{
								displayRecordReport(currentInventory.getRecordCount());
							}//End of else statement testing if the recordCount <= 0
						}//End of if statement testing the menuSelection == 'A'
						else
						{
							currentInventory.setSearchIndex(validateSearchValue(input));
							//if statement to test if the currentInventory itemSearchInmdex < 0
							if(currentInventory.getItemSearchIndex() < 0)
							{
								displayNotFound();
							}//End of if statement testing the Item search index < 0
							else
							{
								currentOrder.setLastItemSelectedIndex(currentInventory.getItemSearchIndex());
								currentOrder.setItemID(currentInventory.getItemIDs());
								currentOrder.setItemPrice(currentInventory.getItemPrices());
								currentOrder.setItemName(currentInventory.getItemNames());
								currentOrder.setHowMany(validateHowMany(input));

								//if statement to test the in stock counts < howMany
								if(currentOrder.getInStockCount(currentInventory.getInStockCounts()) < currentOrder.getHowMany())
								{
									displayOutOfStock();
								}//End of if statement to test the in stock count < howMany
								else
								{
									currentOrder.setDiscountType(validateDiscountMenu(input, 
											currentInventory.getDiscountNames(), currentInventory.getDiscountRates()));
									currentOrder.setDiscountName(currentInventory.getDiscountNames());
									currentOrder.setDiscountRate(currentInventory.getDiscountRates());
									currentOrder.setDecreaseInStock(currentInventory);
									currentOrder.setPrizeName(currentInventory.getPrizeNames(), currentInventory.getRandomNumber());
									orders.setWriteOrder(currentOrder.getItemID(), currentOrder.getItemName(), currentOrder.getItemPrice(),
											currentOrder.getHowMany(), currentOrder.getTotalCost());
									//if statement to test if the discount rate is greater than 0 
									if(currentOrder.getDiscountRate() > 0.0)
									{
										displayOrderReport(userName, currentOrder.getItemName(), currentOrder.getItemPrice(), currentOrder.getHowMany(),
												currentOrder.getDiscountName(), currentOrder.getDiscountRate(), currentOrder.getDiscountAmt(),
												currentOrder.getDiscountPrice(), currentOrder.getSubTotal(), currentOrder.getTaxRate(), 
												currentOrder.getTaxAmt(), currentOrder.getTotalCost(), currentOrder.getPrizeName(),
												currentOrder.getInStockCount(currentInventory.getInStockCounts()));
									}//End of if statement testing the discount rate
									else
									{
										displayOrderReport(userName, currentOrder.getItemName(), currentOrder.getItemPrice(), currentOrder.getHowMany(),
												currentOrder.getSubTotal(), currentOrder.getTaxRate(), currentOrder.getTaxAmt(), currentOrder.getTotalCost(),
												currentOrder.getPrizeName(), currentOrder.getInStockCount(currentInventory.getInStockCounts()));
									}//End of else statement to test if the discount rate is 0
								}//End of else statement to test the in stock count < howMany
							}//Else statement testing the item search index < 0
						}//End of else for menuSelection == 'A'
						menuSelection = validateFileSelection(input);
					}//End of while loop testing the the file selection != 'R'
				}//End of else statement testing the currentUser searched index < 0
			}//End of else statement testing the menuSelection != 'A'
			menuSelection = validateMenuSelection(input);
		}//End of while loop to test if the menuSelection != 'Q'

		currentInventory.setLoadItems(orders.getFileName(), orders.getRecordCount());
		//if statement to test if the recordCount > 0
		if(orders.getRecordCount() > 0)
		{
			displayFinalReport(currentInventory.getItemIDs(), currentInventory.getItemNames(), currentInventory.getItemPrices(),
					currentInventory.getOrderQuantities(), currentInventory.getOrderTotals(), currentInventory.getRecordCount(), currentInventory.getGrandTotal());
		}//End of if statement to test recordCount > 0

		//displays the farwell message
		displayFarewellMessage();
		input.close();
	}//End of the main method

	//start of void methods

	//displays the welcome banner
	public static void displayWelcomeBanner()
	{
		System.out.println("Welcome to Alex's Superstore!");
		System.out.println("Please follow the instructions and enjoy shopping with us.");
	}//End of welcome banner

	//displays the farewell message
	public static void displayFarewellMessage()
	{
		System.out.println("Thank you for shopping at Alex's SuperStore!");
		System.out.println("Enjoy the rest of your day!");
	}//End of displayFarewellMessage

	//displays the main menu
	public static void displayMainMenu()
	{
		int localIndex = 0;
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		System.out.println("MAIN MENU");
		//while loop to print the main menu
		while(localIndex < MENU_OPTIONS.length)
		{
			System.out.printf("%-3s%4s\n", "[" + MENU_CHARS[localIndex] + "] for ", MENU_OPTIONS[localIndex]);
			localIndex++;
		}//End of while loop
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		System.out.print("Enter your selection here: ");
	}//End of displayMainMethod

	//displays the file menu
	public static void displayFileMenu()
	{
		int localIndex = 0;
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		System.out.println("FILE MENU");
		//while loop to print the file menu
		while(localIndex < FILE_MENU_OPTIONS.length)
		{
			System.out.printf("%-3s%4s\n", "[" + FILE_MENU_CHARS[localIndex] + "] for ", FILE_MENU_OPTIONS[localIndex]);
			localIndex++;
		}//End of while loop
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		System.out.print("Enter your selection here: ");
	}//End of displayFileMenu

	//displays the discount Menu
	public static void displayDiscountMenu(String[] borrowedDiscountNames, double[] borrowedDiscountRates)
	{
		int localIndex = 0;
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		System.out.println("DISCOUNT MENU");
		//while loop to print the discount menu
		while(localIndex < SUB_MENU_CHARS.length)
		{
			System.out.printf("%-3s%-20s%9.1f%%\n", "[" + SUB_MENU_CHARS[localIndex] + "] for ", borrowedDiscountNames[localIndex], (borrowedDiscountRates[localIndex] * 100));
			localIndex++;
		}//End of while loop
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		System.out.print("Please make your selection here: ");
	}//End of displayDiscountMenu

	//displays the account results when an account is created
	public static void displayAccountResults()
	{
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		System.out.println("ACCOUNT RESULTS");
		System.out.println("New account created");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
	}//End of displayAccountResults

	//overloaded methods to display the account results if the username already exists
	public static void displayAccountResults(String userName)
	{
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		System.out.println("ACCOUNT RESULTS");
		System.out.println("Account not created: username, " + userName + ", already exists");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
	}//End of overloaded displayAccountResults

	//method to display the login in error
	public static void displayLoginError()
	{
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		System.out.println("LOGIN ERROR");
		System.out.println("Username and/or Password is incorrect");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
	}//End of displayLoginError

	//displays the record report
	public static void displayRecordReport(int borrowedRecordCount)
	{
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		System.out.println("RECORD REPORT");
		System.out.printf("%-3s\n", borrowedRecordCount + " records processed");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
	}//End of displayRecordReport

	//displays the out of stock error
	public static void displayOutOfStock()
	{
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		System.out.println("OUT OF STOCK ERROR");
		System.out.println("The quantity entered is greater than the quantity in-stock");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
	}//End of displayOutOfStock

	//displays and error if the file cannot be opened
	public static void displayFileError()
	{
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		System.out.println("FILE ERROR");
		System.out.println("The file named was not found or could not be opened");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
	}//End of displayFileError

	//displays the error message if the search value is not found
	public static void displayNotFound()
	{
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		System.out.println("NOT FOUND ERROR");
		System.out.println("The search value entered was not found");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
	}//End of displayNotFound

	//displays the order report if the discount rate is 0 
	public static void displayOrderReport(String borrowedUserName, String borrowedItemName, double borrowedItemPrice, int borrowedHowMany, double borrowedSubTotal,
			double borrowedTaxRate, double borrowedTaxAmt, double borrowedTotalCost, String borrowedPrizeName, int borrowedInStockCounts)
	{
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		System.out.println("ORDER REPORT");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		System.out.printf("%-17s%3s\n", "Customer Name:", borrowedUserName);
		System.out.println(" ");
		System.out.printf("%-17s%6s\n", "Item Name:", borrowedItemName);
		System.out.printf("%-17s$%9.2f\n", "Item Price:", borrowedItemPrice);
		System.out.println(" ");
		System.out.printf("%-17s%9d\n", "Quantity:", borrowedHowMany);
		System.out.println(" ");
		System.out.printf("%-17s$%9.2f\n", "Subtotal:", borrowedSubTotal);
		System.out.printf("%-17s%9.1f%%\n", "Tax Rate:", (borrowedTaxRate * 100));
		System.out.printf("%-17s$%9.2f\n", "Tax Amount:", borrowedTaxAmt);
		System.out.println(" ");
		System.out.printf("%-17s$%9.2f\n", "Order Total:", borrowedTotalCost);
		System.out.println(" ");
		System.out.printf("%-17s%9s\n", "Prize:", borrowedPrizeName);
		System.out.println(" ");
		System.out.println("Buy more now: Only " + borrowedInStockCounts + " left in stock!");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
	}//End of displayOrderReport if the discount rate is 0 

	//displays the order report if the discount rate is above 0
	public static void displayOrderReport(String borrowedUserName, String borrowedItemName, double borrowedItemPrice, int borrowedHowMany, String borrowedDiscountName,
			double borrowedDiscountRate, double borrowedDiscountAmt, double borrowedDiscountPrice, double borrowedSubTotal, double borrowedTaxRate, double borrowedTaxAmt,
			double borrowedTotalCost, String borrowedPrizeName, int borrowedInStockCounts)
	{
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		System.out.println("ORDER REPORT");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		System.out.printf("%-17s%3s\n", "Customer Name:", borrowedUserName);
		System.out.println(" ");
		System.out.printf("%-17s%6s\n", "Item Name:", borrowedItemName);
		System.out.printf("%-17s$%9.2f\n", "Item Price:", borrowedItemPrice);
		System.out.println(" ");
		System.out.printf("%-17s%9s\n", "Discount Name:", borrowedDiscountName);
		System.out.printf("%-17s%9.1f%%\n", "Discount Rate:", (borrowedDiscountRate * 100));
		System.out.printf("%-17s$%9.2f\n", "Discount Amount:", borrowedDiscountAmt);
		System.out.printf("%-17s$%9.2f\n", "Discount Price:", borrowedDiscountPrice);
		System.out.println(" ");
		System.out.printf("%-17s%9d\n", "Quantity:", borrowedHowMany);
		System.out.println(" ");
		System.out.printf("%-17s$%9.2f\n", "Subtotal:", borrowedSubTotal);
		System.out.printf("%-17s%9.1f%%\n", "Tax Rate:", (borrowedTaxRate * 100));
		System.out.printf("%-17s$%9.2f\n", "Tax Amount:", borrowedTaxAmt);
		System.out.println(" ");
		System.out.printf("%-17s$%9.2f\n", "Order Total:", borrowedTotalCost);
		System.out.println(" ");
		System.out.printf("%-17s%9s\n", "Prize:", borrowedPrizeName);
		System.out.println(" ");
		System.out.println("Buy more now: Only " + borrowedInStockCounts + " left in stock!");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
	}//End of displayOrderReport if the discount rate is above 0

	//displays the final report
	public static void displayFinalReport(int[] borrowedItemIDs, String[] borrowedItemNames, double[] borrowedItemPrices, int[] borrowedOrderQuantities,
			double[] borrowedOrderTotals, int borrowedRecordCount, double borrowedGrandTotal)
	{
		int localIndex = 0;
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		System.out.println("FINAL REPORT");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		System.out.printf("%-15s%-10s%12s%11s%10s\n", "ID", "NAME", "PRICE", "QTY","Total" );
		//while statement to print the arrays
		while(localIndex < borrowedRecordCount)
		{
			System.out.printf("%-15d%-10s%8s%5.2f%8d%8s%5.2f\n", borrowedItemIDs[localIndex], borrowedItemNames[localIndex], 
					"$", borrowedItemPrices[localIndex], borrowedOrderQuantities[localIndex], "$", borrowedOrderTotals[localIndex]);
			localIndex++;
		}//End of while loop to print the final report arrays
		System.out.printf("%-15s\n","GRAND TOTAL");
		System.out.printf("%-2s%-15.2f\n", "$", borrowedGrandTotal);
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
	}//End of displayFinalReport

	//method to get the userName 
	public static String getUserName(Scanner borrowedInput)
	{
		String localUserName = "";
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		System.out.print("Enter your username: ");
		localUserName = borrowedInput.next();
		return localUserName;
	}//End of getUserName

	//method to get the password
	public static String getPassword(Scanner borrowedInput)
	{
		String localPassword = "";
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		System.out.print("Enter your password: ");
		localPassword = borrowedInput.next();
		return localPassword;
	}//End of getPassword

	//method to get the file name
	public static String getFileName(Scanner borrowedInput)
	{
		String localFileName = "";
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		System.out.print("Enter the file name with extension (i.e file.text): ");
		localFileName = borrowedInput.next();
		return localFileName;
	}//End of getFileName

	//validates the search value
	public static int validateSearchValue(Scanner borrowedInput)
	{
		int localSearchVal = 0;
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		System.out.print("Enter the search value: ");
		localSearchVal = borrowedInput.nextInt();
		while(localSearchVal < 0)
		{
			System.out.println("~~~ ERROR: Invalid quantity.~~~");
			System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
			System.out.print("Enter the search value: ");
			localSearchVal = borrowedInput.nextInt();
		}//End of if statement
		return localSearchVal;
	}//End of validateSearchValue

	//method to validate the main menu selection
	public static char validateMenuSelection(Scanner borrowedInput)
	{
		char localSelection = ' ';
		displayMainMenu();
		localSelection = borrowedInput.next().toUpperCase().charAt(0);
		//while loop to validate the localSelection
		while(localSelection != MENU_CHARS[0] && localSelection != MENU_CHARS[1] && localSelection != MENU_CHARS[2])
		{
			System.out.println("~~~ ERROR: Invalid selection.~~~");
			displayMainMenu();
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
		}//End of the while loop
		return localSelection;
	}//End of validateMainMenu

	//method to validate the discount menu selection
	public static char validateDiscountMenu(Scanner borrowedInput, String[] borrowedDiscountNames, double[] borrowedDiscountRates)
	{
		char localSelection = ' ';
		displayDiscountMenu(borrowedDiscountNames, borrowedDiscountRates);
		localSelection = borrowedInput.next().toUpperCase().charAt(0);
		//While loop to validate the localSelection
		while(localSelection != SUB_MENU_CHARS[0] && localSelection != SUB_MENU_CHARS[1] && localSelection != SUB_MENU_CHARS[2] && localSelection != SUB_MENU_CHARS[3])
		{
			System.out.println("~~~ERROR: Invalid selection.~~~");
			displayDiscountMenu(borrowedDiscountNames, borrowedDiscountRates);
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
		}//End of validation loop
		return localSelection;
	}//End of validateDiscountMenu

	//method to validate the file menu selection
	public static char validateFileSelection(Scanner borrowedInput)
	{
		char localSelection = ' ';
		displayFileMenu();
		localSelection = borrowedInput.next().toUpperCase().charAt(0);
		//while loop to validate the localSelection
		while(localSelection != FILE_MENU_CHARS[0] && localSelection != FILE_MENU_CHARS[1] && localSelection != FILE_MENU_CHARS[2])
		{
			System.out.println("~~~ ERROR: Invalid selection.~~~");
			displayFileMenu();
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
		}//End of while loop
		return localSelection;
	}//End of validateFileMenu

	//method to validate howMany
	public static String validateHowMany(Scanner borrowedInput)
	{
		String localHowMany = "";
		System.out.print("Please enter a quantity: ");
		localHowMany = borrowedInput.next();
		//validation loop for localHowMany
		while(Integer.parseInt(localHowMany) <= 0)
		{
			System.out.println("~~~ ERROR: Invalid quantity.~~~");
			System.out.print("Please enter a quantity: ");
			localHowMany = borrowedInput.next();
		}//end of validation loop
		return String.valueOf(localHowMany);
	}//End of validateHowMany

}//End of the main class
